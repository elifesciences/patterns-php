#!/usr/bin/env php
<?php

use GitWrapper\Event\GitOutputStreamListener;
use GitWrapper\GitWorkingCopy;
use GitWrapper\GitWrapper;
use Rs\Json\Pointer;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Yaml\Yaml;
use function eLife\Patterns\flatten;
use function eLife\Patterns\iterator_to_unique_array;

require_once __DIR__.'/../vendor/autoload.php';

if (!empty($argv[1])) {
    $reference = $argv[1];
} else {
    $reference = 'origin/master';
}

$sourceDir = __DIR__.'/../pattern-library';
$outputDir = __DIR__.'/../resources';
$filesystem = new Filesystem();
$wrapper = new GitWrapper();
$wrapper->addOutputListener(new GitOutputStreamListener());
$tokenizer = new Mustache_Tokenizer();

if (false === is_dir($sourceDir)) {
    $repo = $wrapper->cloneRepository('git@github.com:elifesciences/pattern-library.git', $sourceDir);
} else {
    $repo = new GitWorkingCopy($wrapper, $sourceDir);
    $repo->fetch();
}

$repo->reset($reference, ['hard' => true]);

ProcessBuilder::create()
    ->setArguments(['npm', 'install'])
    ->setWorkingDirectory($sourceDir)
    ->setTimeout(180)
    ->getProcess()
    ->enableOutput()
    ->mustRun(function ($type, $buffer) {
        if (Process::ERR === $type) {
            echo 'ERR > '.$buffer;
        } else {
            echo 'OUT > '.$buffer;
        }
    })
;

ProcessBuilder::create()
    ->setArguments(['gulp', '--environment', 'production'])
    ->setWorkingDirectory($sourceDir)
    ->getProcess()
    ->enableOutput()
    ->mustRun(function ($type, $buffer) {
        if (Process::ERR === $type) {
            echo 'ERR > '.$buffer;
        } else {
            echo 'OUT > '.$buffer;
        }
    })
;

$filesystem->mirror($sourceDir.'/source/assets', $outputDir.'/assets', null,
    ['override' => true, 'delete' => true]);
$filesystem->remove($outputDir.'/assets/img/fixtures/');

$patternDir = $sourceDir.'/source/_patterns';

$finder = (new Finder())->files()->in($patternDir)->name('*.yaml');

$filesystem->remove($outputDir.'/definitions/');
$filesystem->remove($outputDir.'/templates/');

$foundTemplates = [];
$resolvedTemplates = [];

foreach ($finder as $file) {
    $yaml = Yaml::parse($file->getContents());
    $yaml = resolveJsonReferences($yaml, $file);
    $yaml['assets']['css'] = iterator_to_unique_array(flatten($yaml['assets']['css']));
    sort($yaml['assets']['css']);
    $yaml['assets']['js'] = iterator_to_unique_array(flatten($yaml['assets']['js']));
    sort($yaml['assets']['js']);
    $yaml = Yaml::dump($yaml, 100);
    $yaml = str_replace(' {  }', ' []', $yaml);

    $filesystem->dumpFile($outputDir.'/definitions/'.$file->getFilename(), $yaml);

    $template = new SplFileInfo(substr($file->getRealPath(), 0, -4).'mustache');
    $foundTemplates[] = $template->getFilename();

    foreach ($tokenizer->scan(file_get_contents($template->getRealPath())) as $token) {
        if (Mustache_Tokenizer::T_PARTIAL === $token['type']) {
            $foundTemplates[] = explode('-', $token['name'], 2)[1].'.mustache';
        }
    }

    $filesystem->copy($template->getRealPath(), $outputDir.'/templates/'.$template->getFilename(), true);
    $resolvedTemplates[] = $template->getFilename();
}

foreach (array_diff($foundTemplates, $resolvedTemplates) as $missingTemplate) {
    $finder = (new Finder())->files()->in($patternDir)->name($missingTemplate);
    if (0 === count($finder)) {
        throw new Exception('Can\'t find template '.$missingTemplate);
    } elseif (count($finder) > 1) {
        throw new Exception('Found more than one template for '.$missingTemplate);
    }

    foreach ($finder as $template) {
        $filesystem->copy($template->getRealPath(), $outputDir.'/templates/'.$template->getFilename(), true);
    }
}

/**
 * Naive JSON reference resolver than can handle YAML.
 *
 * @internal
 */
function resolveJsonReferences(array $json, SplFileInfo $file) : array
{
    foreach ($json as $key => $value) {
        if (is_array($value)) {
            $json[$key] = resolveJsonReferences($value, $file);
        } elseif ('$ref' === $key) {
            $parts = explode('#', $value, 2);

            if (empty($parts[0])) {
                $referenced = $file;
            } else {
                $referenced = new SplFileInfo(dirname($file->getRealPath()).'/'.$parts[0]);
            }

            if (null === $json = json_decode(file_get_contents($referenced->getRealPath()), true)) {
                $json = Yaml::parse(file_get_contents($referenced->getRealPath()));
            }

            $pointer = new Pointer(json_encode($json));

            return resolveJsonReferences($pointer->get($parts[1]), $referenced);
        }
    }

    return $json;
}
